#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import sys
import os

# Ajouter le r√©pertoire courant au path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ai_classifier import AdvancedCEDEAOClassifier

def test_telephone_classification():
    """Test sp√©cifique pour la classification des t√©l√©phones"""
    
    print("üîç Test de classification pour 't√©l√©phone portable'")
    print("=" * 60)
    
    # Initialiser le classificateur
    try:
        classifier = AdvancedCEDEAOClassifier()
        print("‚úÖ Classificateur initialis√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return
    
    # Charger les donn√©es CEDEAO
    try:
        with open('MON-TEC-CEDEAO-SH-2022-FREN-09-04-2024.txt', 'r', encoding='utf-8') as f:
            cedeao_data = f.read()
        print("‚úÖ Donn√©es CEDEAO charg√©es")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement des donn√©es CEDEAO: {e}")
        return
    
    # Cr√©er une base de donn√©es simplifi√©e pour le test
    database = {
        'subheadings': {
            '8517.13.00.00': {
                'description': 'T√©l√©phones intelligents',
                'rate': '10%'
            },
            '8517.14.00.00': {
                'description': 'Autres t√©l√©phones pour r√©seaux cellulaires',
                'rate': '10%'
            },
            '8517.18.00.00': {
                'description': 'Autres t√©l√©phones',
                'rate': '10%'
            }
        },
        'chapters': {
            '85': 'Machines, appareils et mat√©riels √©lectriques et leurs parties; appareils d\'enregistrement ou de reproduction du son, appareils d\'enregistrement ou de reproduction des images et du son en t√©l√©vision, et parties et accessoires de ces appareils'
        }
    }
    
    # Test avec diff√©rentes descriptions
    test_cases = [
        "t√©l√©phone portable",
        "t√©l√©phone intelligent",
        "smartphone",
        "t√©l√©phone mobile",
        "t√©l√©phone cellulaire",
        "iPhone",
        "Samsung Galaxy"
    ]
    
    for description in test_cases:
        print(f"\nüì± Test avec: '{description}'")
        print("-" * 40)
        
        try:
            # Test de pr√©traitement
            preprocessed = classifier.preprocess_text(description)
            print(f"Pr√©traitement: '{preprocessed}'")
            
            # Test d'extraction de caract√©ristiques
            features = classifier.extract_features(description)
            print(f"Caract√©ristiques extraites: {features}")
            
            # Test de classification
            results = classifier.classify_product(description, database)
            print(f"R√©sultats de classification: {len(results)} trouv√©s")
            
            for i, result in enumerate(results[:3]):
                print(f"  {i+1}. {result['code']} - {result['description']} (score: {result['final_score']:.3f})")
            
            if not results:
                print("  ‚ùå Aucun r√©sultat trouv√©")
                
        except Exception as e:
            print(f"  ‚ùå Erreur: {e}")
    
    # Test de similarit√© s√©mantique
    print(f"\nüîç Test de similarit√© s√©mantique")
    print("-" * 40)
    
    query = "t√©l√©phone portable"
    targets = [
        "T√©l√©phones intelligents",
        "Autres t√©l√©phones pour r√©seaux cellulaires",
        "Machines √©lectriques"
    ]
    
    for target in targets:
        similarity = classifier.calculate_semantic_similarity(query, target)
        print(f"'{query}' vs '{target}': {similarity:.3f}")

if __name__ == "__main__":
    test_telephone_classification()
