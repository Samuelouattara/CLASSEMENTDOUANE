#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test complet de l'int√©gration du dictionnaire fran√ßais dans l'application CEDEAO
"""

import sys
import os
from app import CEDEAOClassifier

def test_integration_complete():
    """Test complet de l'int√©gration"""
    
    print("=" * 70)
    print("TEST D'INT√âGRATION COMPL√àTE - DICTIONNAIRE FRAN√áAIS + CEDEAO")
    print("=" * 70)
    
    # Test 1: Initialisation du classificateur
    print("\n1. TEST D'INITIALISATION")
    print("-" * 40)
    
    try:
        classifier = CEDEAOClassifier()
        print("‚úÖ Classificateur CEDEAO initialis√© avec succ√®s")
        print(f"   - Sections: {len(classifier.sections)}")
        print(f"   - Chapitres: {len(classifier.chapters)}")
        print(f"   - Sous-positions: {len(classifier.subheadings)}")
        
        if classifier.dictionnaire_francais:
            print(f"   - Dictionnaire fran√ßais: {len(classifier.dictionnaire_francais.mots_francais)} mots")
        else:
            print("   ‚ö†Ô∏è Dictionnaire fran√ßais non disponible")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation: {e}")
        return False
    
    # Test 2: Analyse de descriptions douani√®res
    print("\n2. TEST D'ANALYSE DE DESCRIPTIONS DOUANI√àRES")
    print("-" * 40)
    
    descriptions_test = [
        "Ballon de football en cuir naturel, fabriqu√© en France",
        "Smartphone Samsung Galaxy avec √©cran tactile et cam√©ra haute r√©solution",
        "V√©lo de course en aluminium avec roues en carbone",
        "Ordinateur portable Dell avec processeur Intel i7 et SSD 512GB",
        "Chaussures Nike Air Max en cuir et textile avec semelle en caoutchouc"
    ]
    
    for i, desc in enumerate(descriptions_test, 1):
        print(f"\n--- Description {i} ---")
        print(f"Texte: {desc}")
        
        # Analyse fran√ßaise
        if classifier.dictionnaire_francais:
            analyse_fr = classifier.analyser_description_francaise(desc)
            if analyse_fr["disponible"]:
                analyse = analyse_fr["analyse"]
                qualite = analyse_fr["qualite_francais"]
                print(f"   Ratio fran√ßais: {analyse['ratio_francais']:.1%}")
                print(f"   Qualit√©: {qualite}")
                print(f"   Mots fran√ßais: {len(analyse['mots_francais_trouves'])}")
                
                if analyse_fr['suggestions']:
                    print(f"   Suggestions: {len(analyse_fr['suggestions'])}")
            else:
                print("   ‚ùå Analyse fran√ßaise non disponible")
        
        # Classification CEDEAO
        try:
            results = classifier.search_product(desc, use_advanced=False)
            if results:
                best_result = results[0]
                print(f"   Meilleur r√©sultat CEDEAO: {best_result['code']} ({best_result['relevance']:.1%})")
            else:
                print("   ‚ö†Ô∏è Aucun r√©sultat CEDEAO trouv√©")
        except Exception as e:
            print(f"   ‚ùå Erreur classification CEDEAO: {e}")
    
    # Test 3: Fonctionnalit√©s du dictionnaire
    print("\n3. TEST DES FONCTIONNALIT√âS DU DICTIONNAIRE")
    print("-" * 40)
    
    if classifier.dictionnaire_francais:
        # Test de reconnaissance de mots
        mots_test = ["ballon", "cuir", "football", "smartphone", "velo", "ordinateur"]
        print("\nTest de reconnaissance de mots:")
        for mot in mots_test:
            est_francais = classifier.dictionnaire_francais.est_mot_francais(mot)
            print(f"   '{mot}': {'‚úÖ Fran√ßais' if est_francais else '‚ùå Non fran√ßais'}")
        
        # Test de suggestions
        print("\nTest de suggestions:")
        mots_similaires = ["ballon", "cuir", "velo"]
        for mot in mots_similaires:
            suggestions = classifier.dictionnaire_francais.suggerer_mots_similaires(mot, 3)
            print(f"   '{mot}' ‚Üí {', '.join(suggestions) if suggestions else 'Aucune suggestion'}")
        
        # Test de statistiques
        stats = classifier.obtenir_statistiques_dictionnaire()
        print(f"\nStatistiques du dictionnaire:")
        print(f"   Total mots: {stats['total_mots']}")
        print(f"   Longueur moyenne: {stats['longueur_moyenne']:.1f}")
    else:
        print("‚ùå Dictionnaire fran√ßais non disponible pour les tests")
    
    # Test 4: Enrichissement du dictionnaire
    print("\n4. TEST D'ENRICHISSEMENT DU DICTIONNAIRE")
    print("-" * 40)
    
    if classifier.dictionnaire_francais:
        mots_avant = len(classifier.dictionnaire_francais.mots_francais)
        nouveaux_mots = ["test_mot_1", "test_mot_2", "test_mot_3"]
        
        try:
            classifier.enrichir_dictionnaire(nouveaux_mots)
            mots_apres = len(classifier.dictionnaire_francais.mots_francais)
            print(f"‚úÖ Enrichissement r√©ussi: {mots_avant} ‚Üí {mots_apres} mots")
            
            # V√©rifier que les nouveaux mots sont bien ajout√©s
            for mot in nouveaux_mots:
                if classifier.dictionnaire_francais.est_mot_francais(mot):
                    print(f"   ‚úÖ '{mot}' ajout√© avec succ√®s")
                else:
                    print(f"   ‚ùå '{mot}' non trouv√© apr√®s ajout")
                    
        except Exception as e:
            print(f"‚ùå Erreur lors de l'enrichissement: {e}")
    else:
        print("‚ùå Dictionnaire fran√ßais non disponible pour l'enrichissement")
    
    # Test 5: Int√©gration compl√®te
    print("\n5. TEST D'INT√âGRATION COMPL√àTE")
    print("-" * 40)
    
    description_complete = "Ballon de football professionnel en cuir naturel, taille 5, fabriqu√© en France, pour usage sportif"
    
    print(f"Description test: {description_complete}")
    
    # Analyse fran√ßaise
    if classifier.dictionnaire_francais:
        analyse_fr = classifier.analyser_description_francaise(description_complete)
        if analyse_fr["disponible"]:
            analyse = analyse_fr["analyse"]
            print(f"   Analyse fran√ßaise: {analyse['ratio_francais']:.1%} fran√ßais")
            print(f"   Mots fran√ßais trouv√©s: {len(analyse['mots_francais_trouves'])}")
    
    # Classification CEDEAO
    try:
        results = classifier.search_product(description_complete, use_advanced=False)
        if results:
            print(f"   Classification CEDEAO: {len(results)} r√©sultat(s)")
            for i, result in enumerate(results[:3]):
                print(f"     {i+1}. {result['code']} - {result['relevance']:.1%}")
        else:
            print("   ‚ö†Ô∏è Aucun r√©sultat CEDEAO")
    except Exception as e:
        print(f"   ‚ùå Erreur classification: {e}")
    
    print("\n" + "=" * 70)
    print("üéâ TEST D'INT√âGRATION TERMIN√â AVEC SUCC√àS !")
    print("=" * 70)
    
    return True

def test_performance():
    """Test de performance de l'int√©gration"""
    
    print("\n" + "=" * 70)
    print("TEST DE PERFORMANCE")
    print("=" * 70)
    
    import time
    
    classifier = CEDEAOClassifier()
    
    # Test de performance - analyse fran√ßaise
    if classifier.dictionnaire_francais:
        start_time = time.time()
        for i in range(100):
            classifier.analyser_description_francaise("Test de performance")
        end_time = time.time()
        
        print(f"‚úÖ 100 analyses fran√ßaises en {end_time - start_time:.3f} secondes")
        print(f"   Moyenne: {(end_time - start_time) / 100 * 1000:.2f} ms par analyse")
    
    # Test de performance - classification CEDEAO
    start_time = time.time()
    for i in range(10):
        classifier.search_product("Test de performance", use_advanced=False)
    end_time = time.time()
    
    print(f"‚úÖ 10 classifications CEDEAO en {end_time - start_time:.3f} secondes")
    print(f"   Moyenne: {(end_time - start_time) / 10 * 1000:.2f} ms par classification")

if __name__ == "__main__":
    print("D√©marrage des tests d'int√©gration...")
    
    # Test principal
    success = test_integration_complete()
    
    if success:
        # Test de performance
        test_performance()
        
        print("\nüéØ R√âSUM√â:")
        print("‚úÖ Int√©gration du dictionnaire fran√ßais r√©ussie")
        print("‚úÖ Fonctionnalit√©s de base op√©rationnelles")
        print("‚úÖ Enrichissement du dictionnaire fonctionnel")
        print("‚úÖ Performance acceptable")
        print("\nüöÄ L'application est pr√™te √† √™tre utilis√©e !")
    else:
        print("\n‚ùå Des erreurs ont √©t√© d√©tect√©es lors de l'int√©gration")
        sys.exit(1)
