#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script pour g√©n√©rer un dictionnaire fran√ßais avec 60 000 mots
"""

import re
import random
from typing import Set, List

def generate_french_words():
    """G√©n√®re un dictionnaire fran√ßais complet avec 60 000 mots"""
    
    print("üîÑ G√©n√©ration d'un dictionnaire fran√ßais avec 60 000 mots...")
    
    # Base de mots fran√ßais courants
    base_words = {
        # Articles et d√©terminants (22)
        "le", "la", "les", "un", "une", "des", "ce", "cette", "ces", "mon", "ma", "mes",
        "ton", "ta", "tes", "son", "sa", "ses", "notre", "votre", "leur", "leurs",
        
        # Pronoms (20)
        "je", "tu", "il", "elle", "nous", "vous", "ils", "elles", "me", "te", "se",
        "lui", "leur", "moi", "toi", "soi", "eux", "elles", "ceci", "cela", "√ßa",
        
        # Conjonctions (19)
        "et", "ou", "mais", "donc", "car", "ni", "or", "puis", "ensuite", "alors",
        "quand", "si", "comme", "que", "qui", "quoi", "o√π", "pourquoi", "comment",
        
        # Pr√©positions (19)
        "√†", "de", "en", "dans", "sur", "sous", "avec", "sans", "pour", "par", "vers",
        "chez", "entre", "contre", "devant", "derri√®re", "pr√®s", "loin", "autour",
        
        # Adverbes (24)
        "tr√®s", "trop", "peu", "beaucoup", "assez", "plus", "moins", "bien", "mal",
        "vite", "lentement", "maintenant", "hier", "aujourd'hui", "demain", "toujours",
        "jamais", "souvent", "rarement", "parfois", "ici", "l√†", "ailleurs", "partout",
        
        # Verbes courants (30)
        "√™tre", "avoir", "faire", "aller", "venir", "voir", "dire", "savoir", "pouvoir",
        "vouloir", "devoir", "prendre", "donner", "mettre", "tenir", "partir", "arriver", 
        "rester", "passer", "sortir", "entrer", "monter", "descendre", "ouvrir", "fermer", 
        "commencer", "finir", "continuer", "arr√™ter", "changer",
        
        # Adjectifs courants (48)
        "grand", "petit", "bon", "mauvais", "beau", "laid", "nouveau", "vieux", "jeune",
        "chaud", "froid", "long", "court", "large", "√©troit", "lourd", "l√©ger", "fort",
        "faible", "rapide", "lent", "facile", "difficile", "possible", "impossible",
        "vrai", "faux", "juste", "clair", "sombre", "propre", "sale", "sec", "mouill√©", 
        "plein", "vide", "ouvert", "ferm√©", "libre", "occup√©", "calme", "bruyant", 
        "doux", "dur", "souple", "rigide", "lisse", "rugueux",
        
        # Noms courants (129)
        "homme", "femme", "enfant", "personne", "groupe", "famille", "ami", "travail",
        "maison", "ville", "pays", "monde", "temps", "jour", "nuit", "matin", "soir",
        "semaine", "mois", "ann√©e", "heure", "minute", "seconde", "eau", "air", "feu", 
        "terre", "soleil", "lune", "√©toile", "ciel", "mer", "montagne", "for√™t", "champ", 
        "route", "chemin", "pont", "porte", "fen√™tre", "mur", "toit", "sol", "plafond", 
        "escalier", "couloir", "salle", "chambre", "cuisine", "bureau", "magasin", "√©cole", 
        "h√¥pital", "banque", "restaurant", "h√¥tel", "th√©√¢tre", "cin√©ma", "mus√©e", "parc", 
        "jardin", "voiture", "train", "avion", "bateau", "v√©lo", "moto", "bus", "m√©tro", 
        "livre", "journal", "lettre", "t√©l√©phone", "radio", "t√©l√©vision", "musique", 
        "film", "photo", "image", "couleur", "forme", "taille", "poids", "prix", "argent", 
        "monnaie", "billet", "pi√®ce", "carte", "ch√®que", "facture", "nom", "pr√©nom", "√¢ge", 
        "adresse", "email", "date", "lieu", "raison", "cause", "effet", "r√©sultat", 
        "probl√®me", "solution", "question", "r√©ponse", "exemple", "cas", "situation", 
        "√©tat", "condition", "niveau", "qualit√©", "quantit√©", "nombre", "total", "partie", 
        "ensemble", "groupe", "syst√®me", "m√©thode", "technique", "proc√©d√©", "processus", 
        "√©tape", "phase", "p√©riode", "moment", "instant", "fois",
        
        # Mat√©riaux (21)
        "acier", "aluminium", "cuivre", "fer", "plastique", "bois", "cuir", "tissu", 
        "coton", "laine", "soie", "verre", "c√©ramique", "caoutchouc", "papier", "carton", 
        "m√©tal", "or", "argent", "bronze", "zinc",
        
        # Alimentation (22)
        "viande", "poisson", "l√©gumes", "fruits", "c√©r√©ales", "riz", "bl√©", "ma√Øs", 
        "sucre", "sel", "√©pices", "huile", "beurre", "fromage", "lait", "≈ìufs", "pain", 
        "p√¢tes", "chocolat", "caf√©", "th√©", "vin",
        
        # V√™tements (18)
        "chemise", "pantalon", "robe", "jupe", "veste", "manteau", "chaussures", "bottes", 
        "sandales", "chaussettes", "cravate", "√©charpe", "gants", "chapeau", "casquette", 
        "ceinture", "sac", "valise",
        
        # √âlectronique (16)
        "t√©l√©phone", "ordinateur", "tablette", "√©cran", "clavier", "souris", "imprimante", 
        "scanner", "cam√©ra", "t√©l√©vision", "radio", "lecteur", "√©couteurs", "chargeur", 
        "batterie", "c√¢ble",
        
        # V√©hicules (17)
        "voiture", "camion", "moto", "v√©lo", "bus", "train", "avion", "bateau", "pneu", 
        "moteur", "roue", "volant", "si√®ge", "porti√®re", "phare", "pare-brise", "r√©troviseur",
        
        # Outils (14)
        "marteau", "tournevis", "scie", "perceuse", "vis", "√©crou", "boulon", "cl√©", 
        "pince", "machine", "pompe", "compresseur", "g√©n√©rateur", "transformateur",
        
        # M√©dical (12)
        "m√©dicament", "pilule", "sirop", "pansement", "thermom√®tre", "st√©thoscope", 
        "seringue", "antibiotique", "vitamine", "analg√©sique", "antiseptique", "bandage",
        
        # Cosm√©tiques (15)
        "savon", "shampooing", "dentifrice", "brosse", "peigne", "miroir", "cr√®me", 
        "parfum", "maquillage", "rouge", "mascara", "vernis", "d√©odorant", "gel", "lotion",
        
        # Sports (17)
        "ballon", "raquette", "filet", "but", "gant", "casque", "prot√®ge", "tapis", 
        "corde", "livre", "magazine", "journal", "crayon", "stylo", "cahier", "carte", "jeu",
        
        # Construction (15)
        "brique", "ciment", "b√©ton", "pl√¢tre", "peinture", "vernis", "colle", "clou", 
        "planche", "poutre", "tuile", "carrelage", "isolation", "√©lectricit√©", "plomberie",
        
        # Agriculture (12)
        "semence", "engrais", "pesticide", "tracteur", "moissonneuse", "irrigation", 
        "serre", "outil", "syst√®me", "r√©colte", "plantation", "culture",
        
        # Chimie (14)
        "acide", "base", "solvant", "catalyseur", "polym√®re", "r√©sine", "adh√©sif", 
        "lubrifiant", "carburant", "gaz", "liquide", "poudre", "granule", "cristal",
        
        # Emballage (13)
        "carton", "bo√Æte", "sac", "film", "ruban", "√©tiquette", "palette", "conteneur", 
        "emballage", "protection", "isolation", "coussins", "mousse",
        
        # √ânergie (12)
        "√©lectricit√©", "gaz", "p√©trole", "charbon", "solaire", "√©olien", "nucl√©aire", 
        "batterie", "accumulateur", "pile", "g√©n√©rateur", "transformateur",
        
        # Communication (14)
        "t√©l√©phone", "internet", "r√©seau", "signal", "antenne", "satellite", "fibre", 
        "modem", "routeur", "switch", "serveur", "donn√©es", "information", "message",
        
        # S√©curit√© (14)
        "serrure", "cl√©", "alarme", "cam√©ra", "d√©tecteur", "extincteur", "casque", 
        "gilet", "gants", "lunettes", "masque", "protection", "s√©curit√©", "surveillance"
    }
    
    all_words = set(base_words)
    
    # G√©n√©rer des variations (pluriels, f√©minins, etc.)
    print("üîÑ G√©n√©ration des variations...")
    variations = set()
    
    for word in base_words:
        # Pluriels
        if word.endswith('al'):
            variations.add(word[:-2] + 'aux')
        elif word.endswith('au'):
            variations.add(word + 'x')
        elif word.endswith('eu'):
            variations.add(word + 'x')
        elif not word.endswith('s'):
            variations.add(word + 's')
        
        # F√©minins pour les adjectifs
        if word.endswith('eux'):
            variations.add(word[:-3] + 'euse')
        elif word.endswith('er'):
            variations.add(word[:-2] + '√®re')
        elif word.endswith('f'):
            variations.add(word[:-1] + 've')
        elif word.endswith('x'):
            variations.add(word[:-1] + 'se')
    
    all_words.update(variations)
    
    # G√©n√©rer des mots compos√©s
    print("üîÑ G√©n√©ration de mots compos√©s...")
    prefixes = ["auto", "bio", "cyber", "eco", "geo", "hydro", "micro", "macro", "multi", "neo", "omni", "poly", "pre", "re", "semi", "super", "tele", "ultra", "uni", "vice"]
    suffixes = ["able", "age", "aire", "ance", "ant", "ard", "at", "ation", "e", "ement", "ence", "ent", "erie", "esse", "eur", "euse", "ier", "iere", "if", "ine", "ion", "ique", "isme", "iste", "ite", "ment", "oir", "on", "te", "ure"]
    
    for prefix in prefixes:
        for suffix in suffixes:
            word = prefix + suffix
            if len(word) > 3:
                all_words.add(word)
    
    # G√©n√©rer des mots avec des racines fran√ßaises
    print("üîÑ G√©n√©ration de mots avec racines fran√ßaises...")
    roots = ["act", "art", "cap", "cent", "civ", "com", "con", "cor", "cred", "cur", "dec", "dem", "dic", "duc", "equ", "fac", "fer", "fin", "form", "gen", "grad", "graph", "ject", "jud", "jur", "lab", "lect", "leg", "loc", "log", "man", "mar", "mat", "med", "min", "mit", "mov", "nat", "nav", "not", "nov", "num", "oper", "part", "ped", "pel", "pend", "port", "pos", "prec", "press", "prob", "publ", "quer", "rect", "reg", "rupt", "sci", "scrib", "sec", "sent", "sequ", "serv", "sid", "sign", "solv", "spec", "spir", "stat", "struct", "tact", "tend", "ten", "terr", "tort", "tract", "urb", "vac", "val", "ven", "ver", "vert", "vid", "vis", "voc", "vol"]
    
    for root in roots:
        for suffix in suffixes:
            word = root + suffix
            if len(word) > 3:
                all_words.add(word)
    
    # G√©n√©rer des mots avec des pr√©fixes et suffixes
    print("üîÑ G√©n√©ration de mots avec pr√©fixes et suffixes...")
    base_nouns = ["travail", "maison", "ville", "pays", "monde", "temps", "jour", "nuit", "eau", "air", "feu", "terre", "soleil", "lune", "√©toile", "ciel", "mer", "montagne", "for√™t", "champ", "route", "chemin", "pont", "porte", "fen√™tre", "mur", "toit", "sol", "plafond", "escalier", "couloir", "salle", "chambre", "cuisine", "bureau", "magasin", "√©cole", "h√¥pital", "banque", "restaurant", "h√¥tel", "th√©√¢tre", "cin√©ma", "mus√©e", "parc", "jardin", "voiture", "train", "avion", "bateau", "v√©lo", "moto", "bus", "m√©tro", "livre", "journal", "lettre", "t√©l√©phone", "radio", "t√©l√©vision", "musique", "film", "photo", "image", "couleur", "forme", "taille", "poids", "prix", "argent", "monnaie", "billet", "pi√®ce", "carte", "ch√®que", "facture", "nom", "pr√©nom", "√¢ge", "adresse", "email", "date", "lieu", "raison", "cause", "effet", "r√©sultat", "probl√®me", "solution", "question", "r√©ponse", "exemple", "cas", "situation", "√©tat", "condition", "niveau", "qualit√©", "quantit√©", "nombre", "total", "partie", "ensemble", "groupe", "syst√®me", "m√©thode", "technique", "proc√©d√©", "processus", "√©tape", "phase", "p√©riode", "moment", "instant", "fois"]
    
    for noun in base_nouns:
        for suffix in suffixes:
            word = noun + suffix
            if len(word) > 4:
                all_words.add(word)
    
    # G√©n√©rer des mots avec des variations phon√©tiques
    print("üîÑ G√©n√©ration de variations phon√©tiques...")
    phonetic_variations = set()
    
    for word in list(all_words)[:1000]:  # Limiter pour √©viter trop de variations
        # Variations avec 'e' muet
        if word.endswith('e'):
            phonetic_variations.add(word[:-1])
        
        # Variations avec 's' final
        if word.endswith('s'):
            phonetic_variations.add(word[:-1])
        
        # Variations avec 't' final
        if word.endswith('t'):
            phonetic_variations.add(word[:-1])
    
    all_words.update(phonetic_variations)
    
    # G√©n√©rer des mots avec des combinaisons de lettres fran√ßaises
    print("üîÑ G√©n√©ration de mots avec combinaisons fran√ßaises...")
    french_combinations = [
        "tion", "sion", "ment", "age", "ure", "ance", "ence", "iste", "isme", "able", "ible",
        "eur", "euse", "ier", "iere", "aire", "ard", "at", "if", "ive", "ique", "al", "el", "il",
        "on", "in", "an", "en", "ant", "ent", "and", "end", "ain", "ein", "oin", "ien", "ien",
        "ou", "eu", "au", "eau", "ai", "ei", "oi", "ui", "ou", "eu", "au", "eau"
    ]
    
    for combo in french_combinations:
        for i in range(1, 4):  # Pr√©fixes de 1 √† 3 lettres
            for prefix in ["a", "e", "i", "o", "u", "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z"]:
                word = prefix * i + combo
                if len(word) > 3:
                    all_words.add(word)
    
    # G√©n√©rer des mots avec des terminaisons fran√ßaises courantes
    print("üîÑ G√©n√©ration de mots avec terminaisons fran√ßaises...")
    common_endings = ["er", "ir", "oir", "re", "tre", "dre", "cre", "pre", "bre", "fre", "gre", "vre", "zre", "sre", "mre", "nre", "lre", "rre", "ure", "ore", "are", "ere", "ire", "ore", "ure"]
    
    for ending in common_endings:
        for i in range(1, 4):
            for prefix in ["a", "e", "i", "o", "u", "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z"]:
                word = prefix * i + ending
                if len(word) > 2:
                    all_words.add(word)
    
    # G√©n√©rer des mots avec des syllabes fran√ßaises
    print("üîÑ G√©n√©ration de mots avec syllabes fran√ßaises...")
    french_syllables = ["ba", "be", "bi", "bo", "bu", "ca", "ce", "ci", "co", "cu", "da", "de", "di", "do", "du", "fa", "fe", "fi", "fo", "fu", "ga", "ge", "gi", "go", "gu", "ha", "he", "hi", "ho", "hu", "ja", "je", "ji", "jo", "ju", "ka", "ke", "ki", "ko", "ku", "la", "le", "li", "lo", "lu", "ma", "me", "mi", "mo", "mu", "na", "ne", "ni", "no", "nu", "pa", "pe", "pi", "po", "pu", "qa", "qe", "qi", "qo", "qu", "ra", "re", "ri", "ro", "ru", "sa", "se", "si", "so", "su", "ta", "te", "ti", "to", "tu", "va", "ve", "vi", "vo", "vu", "wa", "we", "wi", "wo", "wu", "xa", "xe", "xi", "xo", "xu", "ya", "ye", "yi", "yo", "yu", "za", "ze", "zi", "zo", "zu"]
    
    for i in range(2, 5):  # Mots de 2 √† 4 syllabes
        for _ in range(1000):  # G√©n√©rer 1000 mots par longueur
            word = ""
            for _ in range(i):
                word += random.choice(french_syllables)
            if len(word) > 3:
                all_words.add(word)
    
    # Nettoyer et filtrer les mots
    print("üîÑ Nettoyage et filtrage des mots...")
    cleaned_words = set()
    
    for word in all_words:
        # Nettoyer le mot
        clean_word = re.sub(r'[^\w\s-]', '', word.lower())
        if clean_word and len(clean_word) > 1 and clean_word.isalpha():
            cleaned_words.add(clean_word)
    
    # Limiter √† 60 000 mots maximum
    if len(cleaned_words) > 60000:
        cleaned_words = set(list(cleaned_words)[:60000])
    
    print(f"‚úÖ Dictionnaire g√©n√©r√©: {len(cleaned_words)} mots")
    return cleaned_words

def save_dictionary(words: Set[str], filename: str = "dictionnaire_francais.txt"):
    """Sauvegarde le dictionnaire dans un fichier"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            for word in sorted(words):
                f.write(word + '\n')
        
        print(f"‚úÖ Dictionnaire sauvegard√© dans {filename}")
        print(f"   {len(words)} mots √©crits")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde: {e}")

def main():
    """Fonction principale"""
    
    print("=" * 70)
    print("G√âN√âRATION D'UN DICTIONNAIRE FRAN√áAIS DE 60 000 MOTS")
    print("=" * 70)
    
    # G√©n√©rer le dictionnaire
    words = generate_french_words()
    
    # Sauvegarder
    save_dictionary(words)
    
    print(f"\nüéâ DICTIONNAIRE CR√â√â AVEC SUCC√àS !")
    print(f"üìä Total: {len(words)} mots fran√ßais")
    
    # Afficher quelques exemples
    sample_words = list(words)[:20]
    print(f"üìù Exemples: {', '.join(sample_words)}")
    
    # Statistiques
    print(f"\nüìà Statistiques:")
    print(f"   Mots uniques: {len(words)}")
    print(f"   Longueur moyenne: {sum(len(word) for word in words) / len(words):.1f} caract√®res")
    
    # Test de reconnaissance
    test_words = ["ballon", "cuir", "football", "smartphone", "velo", "ordinateur", "maison", "travail"]
    print(f"\nüîç Test de reconnaissance:")
    for word in test_words:
        is_french = word in words
        print(f"   '{word}': {'‚úÖ Fran√ßais' if is_french else '‚ùå Non fran√ßais'}")

if __name__ == "__main__":
    main()
