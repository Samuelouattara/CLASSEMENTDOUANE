#!/usr/bin/env python3
"""
Script d'installation pour l'IA Classificateur CEDEAO
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur: {e}")
        print(f"   Sortie d'erreur: {e.stderr}")
        return False

def check_python_version():
    """V√©rifie la version de Python"""
    print("üêç V√©rification de la version Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python 3.8+ requis, version actuelle: {version.major}.{version.minor}")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
    return True

def install_dependencies():
    """Installe les d√©pendances Python"""
    print("\nüì¶ Installation des d√©pendances...")
    
    # Mettre √† jour pip
    if not run_command(f"{sys.executable} -m pip install --upgrade pip", "Mise √† jour de pip"):
        return False
    
    # Installer les d√©pendances
    if not run_command(f"{sys.executable} -m pip install -r requirements.txt", "Installation des d√©pendances"):
        return False
    
    return True

def download_spacy_model():
    """T√©l√©charge le mod√®le spaCy fran√ßais"""
    print("\nü§ñ T√©l√©chargement du mod√®le spaCy fran√ßais...")
    
    try:
        import spacy
        # V√©rifier si le mod√®le est d√©j√† install√©
        try:
            nlp = spacy.load("fr_core_news_sm")
            print("‚úÖ Mod√®le spaCy fran√ßais d√©j√† install√©")
            return True
        except OSError:
            # Mod√®le non trouv√©, le t√©l√©charger
            if run_command(f"{sys.executable} -m spacy download fr_core_news_sm", "T√©l√©chargement du mod√®le spaCy"):
                return True
            else:
                print("‚ö†Ô∏è  Le mod√®le spaCy n'a pas pu √™tre t√©l√©charg√©. L'IA avanc√©e pourrait ne pas fonctionner.")
                return False
    except ImportError:
        print("‚ö†Ô∏è  spaCy non install√©. L'IA avanc√©e ne sera pas disponible.")
        return False

def download_nltk_data():
    """T√©l√©charge les donn√©es NLTK n√©cessaires"""
    print("\nüìö T√©l√©chargement des donn√©es NLTK...")
    
    try:
        import nltk
        
        # Cr√©er un script temporaire pour t√©l√©charger les donn√©es
        nltk_script = """
import nltk
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')
try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')
print("NLTK data downloaded successfully")
"""
        
        with open("temp_nltk_download.py", "w") as f:
            f.write(nltk_script)
        
        if run_command(f"{sys.executable} temp_nltk_download.py", "T√©l√©chargement des donn√©es NLTK"):
            os.remove("temp_nltk_download.py")
            return True
        else:
            if os.path.exists("temp_nltk_download.py"):
                os.remove("temp_nltk_download.py")
            return False
    except ImportError:
        print("‚ö†Ô∏è  NLTK non install√©. Certaines fonctionnalit√©s pourraient √™tre limit√©es.")
        return False

def test_installation():
    """Teste l'installation"""
    print("\nüß™ Test de l'installation...")
    
    # Test d'import des modules principaux
    try:
        import streamlit
        print("‚úÖ Streamlit - OK")
    except ImportError:
        print("‚ùå Streamlit - Erreur")
        return False
    
    try:
        import pandas
        print("‚úÖ Pandas - OK")
    except ImportError:
        print("‚ùå Pandas - Erreur")
        return False
    
    try:
        import numpy
        print("‚úÖ NumPy - OK")
    except ImportError:
        print("‚ùå NumPy - Erreur")
        return False
    
    # Test du classificateur de base
    try:
        from app import CEDEAOClassifier
        classifier = CEDEAOClassifier()
        print("‚úÖ Classificateur de base - OK")
    except Exception as e:
        print(f"‚ùå Classificateur de base - Erreur: {e}")
        return False
    
    # Test du classificateur avanc√© (optionnel)
    try:
        from ai_classifier import AdvancedCEDEAOClassifier
        print("‚úÖ Classificateur avanc√© - OK")
    except Exception as e:
        print(f"‚ö†Ô∏è  Classificateur avanc√© - Limit√©: {e}")
    
    return True

def create_launcher_script():
    """Cr√©e un script de lancement"""
    print("\nüöÄ Cr√©ation du script de lancement...")
    
    launcher_content = """#!/usr/bin/env python3
\"\"\"
Script de lancement pour l'IA Classificateur CEDEAO
\"\"\"

import subprocess
import sys
import os

def main():
    print("üèõÔ∏è Lancement de l'IA Classificateur CEDEAO...")
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not os.path.exists("app.py"):
        print("‚ùå Erreur: app.py non trouv√©. Assurez-vous d'√™tre dans le r√©pertoire du projet.")
        return
    
    # Lancer l'application
    try:
        subprocess.run([sys.executable, "-m", "streamlit", "run", "app.py"], check=True)
    except KeyboardInterrupt:
        print("\\nüëã Application arr√™t√©e par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")

if __name__ == "__main__":
    main()
"""
    
    with open("launch.py", "w", encoding="utf-8") as f:
        f.write(launcher_content)
    
    # Rendre le script ex√©cutable (Unix/Linux)
    try:
        os.chmod("launch.py", 0o755)
    except:
        pass
    
    print("‚úÖ Script de lancement cr√©√©: launch.py")

def main():
    """Fonction principale d'installation"""
    print("üèõÔ∏è Installation de l'IA Classificateur CEDEAO")
    print("=" * 60)
    
    # V√©rifier la version Python
    if not check_python_version():
        print("‚ùå Installation annul√©e - Version Python incompatible")
        return False
    
    # Installer les d√©pendances
    if not install_dependencies():
        print("‚ùå Installation annul√©e - Erreur lors de l'installation des d√©pendances")
        return False
    
    # T√©l√©charger les mod√®les
    download_spacy_model()
    download_nltk_data()
    
    # Tester l'installation
    if not test_installation():
        print("‚ùå Installation annul√©e - Erreur lors du test")
        return False
    
    # Cr√©er le script de lancement
    create_launcher_script()
    
    print("\n" + "=" * 60)
    print("‚úÖ Installation termin√©e avec succ√®s!")
    print("\nüöÄ Pour lancer l'application:")
    print("   python launch.py")
    print("   ou")
    print("   streamlit run app.py")
    print("\nüìñ Pour plus d'informations, consultez README.md")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

